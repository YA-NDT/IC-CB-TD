Здравствуйте, коллеги. На этом видеоуроке мы рассмотрим базовые понятия языка С,
организацию памяти и операторы ввода-вывода.

Шаблон программы:
    - Как и программы на любом другом языке, программы на языке С имеют ряд обязательных
	элементов, также называемых шаблоном программы.
    - Рассмотрим эти элементы подробнее. Среда Eclipse при создании файла оставила в
	первых строчках комментарий. Комментарий это любой текст, написанный для удобства
	программиста и игнорируемый компилятором. Комментарии бывают как однострочные, так и
	многострочные. В редких случаях можно встретить внутристрочные комментарии, они
	считаются дурным тоном, поскольку резко снижают читаемость кода.

*Директивы препроцессора:
    - это такие команды, которые будут выполняться не просто до запуска программы, но
	даже до компиляции. В директивах препроцессора подключаются внешние заголовочные
	файлы, и определяются некоторые абсолютные значения проекта. Обратите внимание, что
	директивы препроцессора это достаточно сложный инструмент, и использовать его только
	для определения константных значений - не лучшее архитектурное решение.

*Функция main:
    - Это точка входа в программу. Поскольку программа написанная на языке С работает на
	одном уровне с операционной системой, а не в среде виртуализации, она должна сообщить
	операционной системе, что она отработала нормально, это делается посредством возврата
	в качестве результата работы программы кода ноль. Любой другой возвратный код
	сообщает системе, что программа завершена некорректно и необходимо освобождать занятые
	ею ресурсы. Все операторы, кроме директив препроцессора, комментариев и описаний
	функций должны заканчиваться точкой с запятой.

*Форматированный вывод:
    - Общение с пользователем на чистом Си происходит через консоль. Для того, чтобы
	выводить какую-либо информацию используется функция printf(); предназначенная для
	форматированного вывода некоторого текста в консоль. Функция описана в заголовке
	stdio.h, поэтому мы и включили данный заголовок в нашу программу.
    - Какого рода форматирование применяется при выводе строк в консоль? Существуют два
	основных инструмента придания выводу необходимого вида: экранированные
	последовательности(escape sequences) и заполнители(placeholders)
		- "Экранированная последовательность" это буква или символ, написанные после знака
		обратного слэша, которые при выполнении программы будут на что-то заменены. Самые
		часто используемые это:
			- символ новой строки - \n
			- символ табуляции - \t
			- символ обратного слэша - \\
			- символ конца строки соответственно - \0
		- "Заполнитель" это также специальная последовательность, но она говорит
		компилятору, что на место этой последовательности необходимо вставить некий
		аргумент, который будет передан после строки, через запятую, при вызове данной
		функции printf(); Заполнитель начинается со знака процента и обозначает тип
		вставляемой переменной. Наиболее часто используются:
			- integer(decimal) - %i (%d)
			- строк - %s
			- char - %c
			- указателей(о которых мы поговорим позже) - %p
			- float - %f
			- double(long float) - %lf
			- бззнаковое целое в шестнадцатеричном виде - %x
		Для заполнителей %d %i %f часто используются дополнительные параметры, такие как
		количество знаков после запятой %.2f или общее количество знаков целого числа
		%5d. Это можно использовать для записи чисел с лидирующими нулями %05d; Для того
		чтобы вставить в текст символ процента нужно дважды написать процент.

Переменные и типы данных:
    - переменные в программе на языке С это некоторые именованные контейнеры, содержащие
	значение, строго описанное при создании контейнера. Переменные делятся на
	целочисленные, символьные, указатели и числа с плавающей точкой. Все, кроме указателей
	и символьных переменных бывают как знаковыми так и беззнаковыми. То есть самый старший
	бит в двоичной записи этих переменных отводится под определение, является-ли число
	отрицательным, или положительным. В классическом С нет булевого типа, вместо него
	используется целое число и значения 0 для лжи и любое другое число для истины, обычно
	это единица.
    - Об указателях мы будем подробно говорить на седьмом уроке. С символьным типом тоже
	не всё так просто. Если вкратце, то в переменной типа CHAR хранится число, которое
	можно интерпретировать как символ. По умолчанию тип знаковый, то есть может содержать
	значения от -128 до +127, но символы в таблице ASCII (American standard code for
	information interchange), что совершенно логично, имеют только положительные индексы,
	поэтому в читаемый текст в стандартном С можно превратить только латинский алфавит и
	некоторый набор знаков и символов, находящиеся на первых 128-ми местах в этой таблице.
    - Первые три типа (целые числа, символы и указатели) хранятся в памяти явно в
	двоичном виде, согласно размеру переменной (указатели согласно разрядности системы),
	например:
        - long l = 2000000000; // 4 байта знаковое
        - int i = 2000000000; // 4 байта знаковое
        - short sh = -32700; // 2 байта знаковое
        - char c = -125; //1 байт
        - char ch = ‘A’; //1 байт
	Также можно явно указать компилятору, что мы хотим использовать эту переменную как
	беззнаковую, для этого используется ключевое слово unsigned, что позволит нам хранить
	только положительные числа гораздо бОльших значений. Например, в int максимальное
	значение около 2 млрд 147 млн и минимальное около -2 млрд 147 млн. а в unsigned int
	можно можно хранить значения от 0 до +4 млрд 294 миллионов. В более поздних редакциях
	были утверждены типы long long и другие, для хранения 64-х разрядных целых чисел.
    - Числа с плавающей точкой представлены двумя типами, 4-х байтный float и 8-ми
	байтный double (также называемый long float). Хранятся в памяти в неявном виде, а
	разделённые на мантиссу экспоненту и знак, что делает их одними из самых сложных в
	работе. При работе с числами с плавающей точкой нужно обращать особенное внимание на
	тип переменной, поскольку сравнение внешне одинаковых чисел разных типов с
	вероятностью 99% даст ложный результат.

Как было сказано - переменная это именованный контейнер. У каждого такого контейнера
есть свой собственный адрес в оперативной памяти. Язык С позволяет узнать этот адрес и
работать с ним. Оператор взятия адреса это знак амперсанд, написанный перед именем
переменной. Для вывода в консоль адреса используется специальный заполнитель - %p.
Рассмотрим наглядно. Как видим, урок ведётся с 64-х разрядной операционной системы,
поэтому ячейка памяти имеет 64-х разрядный адрес.

Поговорив о переменных и о выводе в консоль нельзя не сказать о пользовательском вводе
данных. Один из способов пользовательского ввода данных в программу - это использование
функции scanf(); или форматированного ввода. Принцип её работы очень похож на принцип
работы функции printf(); В двойных кавычках мы указываем в виде заполнителя тип
переменной, которую ожидаем от пользователя, а в качестве дополнительного аргумента
указываем адрес той переменной, в которую хотим записать введённые пользователем данные.
Получается процесс прямо противоположный выводу. В этой функции можно использовать все те
же заполнители, что и при выводе, поэтому пользователь может ввести как целые числа, так
и символы, строки и числа с плавающей точкой. Выведем в консоль изменённое введённое
число, чтобы удостовериться, что всё работает.

Время на арифметику?
Остальные особенности языка мы рассмотрим на следующих уроках. До новых встреч.

В языке С поддерживаются все базовые арифметические операции, такие как сложение,
вычитание, умножение, деление. Операции бинарной арифметики, такие как И, ИЛИ, НЕ,
ИСКЛЮЧАЮЩЕЕ ИЛИ, СДВИГИ. А также все вышеперечисленные операции с последующим
присваиванием в первую переменную. То есть запись вида а = а + b; можно сократить до а+=b;
Для упрощения записи операции увеличения и уменьшения значения переменной на единицу
существуют операторы инкремента (++) и декремента (--); Также особенного внимания
заслуживает оператор получения остатка от деления также называемый оператором взятия по
модулю. Записывается как символ % и возвращает остаток от деления первого числа на второе.
Также обратите внимание, что бинарные операторы являются арифметическими и их
использование в качестве условных не рекомендуется, во избежание неожиданных результатов.
