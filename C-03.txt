Рад всех приветствовать на третьем уроке по основам языка С. На этом занятии мы рассмотрим
такие ключевые конструкции языка как "условные операторы", а также что понимается под
"блоками кода" и "областями видимости".

Пожалуй, самый часто используемый в любом языке программирования, в том числе и в языке С
оператор - это оператор if() и его вариации. Оператор if позволяет программе принять
решение о выполнении или невыполнении того или иного действия в зависимости от текущего
состояния. Например, зададим пользователю вопрос, хочет-ли он, чтобы его поприветствовали:

char answer;

printf("do you want me to salute you (y/n)?");
scanf ("%s", &answer);

if(answer == "y") {
	printf("Hello, user");
}

В случае, если условие в скобках выполнится, выполнится и последующий код в фигурных
скобках. Если условие не выполнится, то все операторы внутри этих фигурных скобок будут
проигнорированы. Зачастую складываются ситуации, когда нужно выполнить разные наборы
действий в зависимости от результата проверки условия. Для таких случаев используется
дополнение к оператору if - оператор else в котором описывается последовательность
действий выполняемая в случае если условие в скобках дало ложный результат. Printf("I
didn't want to salute you anyway"); Конструкция if-else является единым оператором.
Множественный выбор при помощи оператора if можно осуществить используя конструкцию
if-else if-else. Данное усложнение также будет являться единым оператором выбора. Например
printf("I can't understand your input"); операторов else if в одной управляющей
конструкции может быть сколько угодно, в отличие от оператора if и else которых не может
быть больше одного.
Для короткой или внутристрочной записи условного оператора, а также для присваивания
переменных по условию можно использовать тернарный оператор. Например, запись вида a = (a
> b) ? b : a; запишет в переменную a минимум переменных а и б. Также тернарный оператор
можно использовать для удобного форматированного вывода, например
printf("%s", (1>0) ? "true" : "false");


Операции сравнения бывают трёх типов - арифметические, логические и тернарный оператор.
Арифметическое сравнение - это привычные нам с детства операторы больше, меньше, больше
или равно, меньше или равно и проверка на равенство, которая записывается в виде двух
знаков равенства. Возвращают истину, когда выполняются соответствующие названиям условия.
Логических операторов четыре - это И, ИЛИ, НЕ и ИСКЛЮЧАЮЩЕЕ ИЛИ. В отличие от
арифметических двоичных операторов - логические возвращают истину и ложь.
Оператор И возвращает истину когда оба операнда истинны
Оператор ИЛИ возвращает истину когда хотя бы один из операндов истинный
Оператор НЕ возвращает истину когда операнд ложный
Оператор ИСКЛЮЧАЮЩЕГО ИЛИ возвращает истину когда операнды различаются

Внутри операторных скобок конструкции if могут находиться другие условные операторы.
Условия расположенные таким образом называются вложенными. Никаких ограничений на
использование вложенных условий в языке С нет. Равно как нет ограничений на использование
сложных условий. Сложные условия это такие условия, где в круглых скобках выполняется
более одного сравнения. Сравнения производятся в порядке заранее оговоренного приоритета.
Например, дана некоторая переменная нужно выяснить, не выходит-ли эта переменная за рамки
заданных значений if(x >= 0 && x <= 10) printf("X fits"); в данной записи мы видим, что
сначала х сравнивается с нулём, затем с десятью, и в конце результаты будут сравнены между
собой. Самый неприоритетный оператор тернарный. Если Вы сомневаетесь в приоритете
сравнений или Вам необходимо описать какое-то очень сложное условие, всегда можно
воспользоваться скобками, задав приоритет операций явно. В таком случае в первую очередь
будут выполнены операции в скобках. Для того, чтобы пользоваться арифметическими бинарными
операторами в качестве логических, обязательно нужно удостовериться, что вы сравниваете
нули и единицы, а не какие-то другие числа.

Говоря об операторах языка С и управляющих конструкциях нельзя не сказать о "блоках кода"
и "областях видимости". Как видно, условные операторы содержат записи в фигурных скобках.
В такие же скобки заключён код функции main. Эти скобки называются "операторными", а то
что в них содержится называется "блоком кода". Все переменные, которые инициализируются
внутри блока кода существуют и видны только внутри кодового блока. Поэтому пространство
между операторными скобками также называют "областью видимости".

На следующем уроке мы начнём говорить о циклах. До новых встреч коллеги

Время на Булеву алгебру и двоичные вычисления?

Булева алгебра это один из базовых, но вместе с тем один из самых мощных инструментов в
программировании. Двоичные вычисления выполняются быстрее десятичных, поскольку являются
естественными для цифровой техники. В бинарной алгебре используются операторы И, ИЛИ, НЕ,
ИСКЛЮЧАЮЩЕЕ ИЛИ и операции СДВИГА влево и вправо. Работают эти операторы точно также, как
и логические, но относительно разрядов двоичного представления чисел, где истина - это
единица, а ложь - это ноль. Условия истинности точно такие же как и для логических
операторов, повторим:
Оператор И возвращает единицу когда оба операнда единицы
Оператор ИЛИ возвращает единицу когда хотя бы один из операндов единица
Оператор НЕ возвращает единицу когда операнд равен нулю
Оператор ИСКЛЮЧАЮЩЕГО ИЛИ возвращает единицу когда операнды различаются

На основе этих знаний мы можем для примера написать программу, меняющую местами значения
переменных без использования третьей, вспомогательной.

char a = 11;
char b = 15;
printf("a = %d, b = %d", a, b);
a = a ^ b;
b = b ^ a;
a = a ^ b;
printf("a = %d, b = %d", a, b);

Рассмотрим происходящее пошагово. Число 11 типа char в двоичном представлении это
00001011, 15 - это 00001111. После выполнения первого оператора в переменную а будет
положено промежуточное число 00000100. После выполнения второго в переменную b будет
положено число 00001011, и после выполнения третьего в переменную а будет положено
значение 00001111.

Операции сдвига бывают логические, арифметические и циклические. В языке С реализован
логический сдвиг, то есть недостающие разряды заполняются нулями. Сдвиг влево на n
значений это умножение на 2 в степени n.
Сдвиг вправо на n значений это целочисленное деление на 2 в степени n.
Например, запись 45 << 3 это тоже самое, что 45 * 2 ^ 3, то есть 45 * 8.
И обратная ей, запись 45 >> 3 это тоже самое, что 45 / 2 ^ 3, то есть 45 / 8.
Бинарная алгебра это большая и сложная тема. Применять бинарную алгебру можно и в
высокоуровневых проектах, поддержка бинарных операций есть в подавляющем числе языков
программирования.
