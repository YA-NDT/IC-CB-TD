* Здравствуйте, коллеги, я рад приветствовать вас на курсе Основы Языка Си

Прежде чем начать детально изучать язык давайте поговорим о том кем как и зачем он создавался

Кроме того на этом занятии мы поговорим о возможностях языка его применении и о том какую пользу он может принести программистам работающим на других языках

Начнём с короткого экскурса в историю языка

- Разрабатывался с 1969 года в компании Bell Labs как развитие языка B(Би).Первая его версия увидела свет в 1973м году в результате трудов Денниса Ритчи и Кена Томпсона  Первоначально язык с был создан для реализации операционной системы UNIX, и дальнейшего программирования в ней но впоследствии был перенесён на множество других платформ. 
В 1970-1980-х годах он активно вытеснял Бейсик с позиции основного Яп для компьютеров и был адаптирован для использования в IBM PC, что также привело к резкому росту его популярности. В то же время Бьёрн Страуструп и другие в лабораториях Bell Labs начали работу по добавлению в Си возможностей объектно-ориентированного программирования. Язык, который они в итоге сделали, C++
	- По-мере развития языка было выпущено четыре спецификации языка (одна неофициальная и три официальных)
		1. 1978 - Неформальная спецификация - "K&R C" на основе книги Денниса Ритчи и Брайана Кернигана "Язык программирования C"
		2. 1989 - Американский национальный институт стандартов выпустил спецификацию "ANSI C" или "C89"
		3. 1999 - появилась спецификация "C99"
		4. 2011 - появилась спецификация "C11"
Что демонстрирует что работа над ним не прекращается по сей день

Каковы возможности языка?

	- В языке С есть возможность работать с указателями на физические ячейки оперативной памяти компьютера. При должной квалификации программиста это позволяет получить максимально эффективный код, близкий к языку ассемблера и даже машинным кодам конкретного процессора
	- С является компилируемым процедурным языком со строгой статической типизацией, что позволяет писать максимально безопасный код, и отсеять бОльшую часть ошибок ещё на этапе компиляции проекта
- Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.

В каких областях программирования используется язык с

	- На языке С написано огромное количество программ, библиотек, и даже операционных систем. Какая-бы у Вас ни была установлена операционная система, очень вероятно, что значительная её часть написана на С.
	- На языке С пишут драйверы для периферийного оборудования, программируют контроллеры для космической аппаратуры, пишут высокоскоростные приложения
	- Помимо уже сказанного, сейчас стремительно набирает популярность такое направление, как Умная техника и Интернет Вещей. Именно из-за этих трендов язык С за последние пару лет снова поднялся в рейтинге TIOBE на второе место

Чем может быть полезно знание языка с для практикующих программистов?

Какой бы язык программирования вы ни изучали, знание языка С способствует:
	- Лучшему пониманию существующих языков высокого уровня, т.к. многие конструкции из языка C перенесены например в такие языки как - C++, C#, Java, Objective-C, python, Swift
	- А также лучшему пониманию некоторых механизмов работы с компьютером, например с его памятью.

Естественно что язык программирования не может состоять только из плюсов. 
Керниган говорит: «Си — инструмент, острый, как бритва: с его помощью можно создать и элегантную программу, и кровавое месиво». Можно совершенно точно сказать, что критике Си подвергается не только со стороны конкурентов, но также апологеты языка видят его слабые стороны. Слова Кернигана подтверждает Ален Голуба, говоря о Си и Си++ «… дают вам столько гибкости, что если у вас нет желания и способности призвать себя к порядку, то в итоге вы можете получить гигантский модуль не поддающейся сопровождению тарабарщины, притворяющийся к тому же компьютерной программой. Вы можете поистине делать всё при помощи этих языков, даже если вы этого не хотите».

В этом видео мы кратко познакомились с историей и возможностями языка с, а также узнали о той пользе которую могут извлечь из изучения языка с программисты на других языках

* Здравствуйте, в этом видео 
  я проведу для вас небольшой обзор инструментов для разработки на языке С, помогу сделать выбор наиболее подходящего именно вам. Язык С является компилируемым языком, поэтому, для того чтобы начать писать программы на языке Си естественно нужно установить компилятор. А для более удобного редактирования кода - средУ разработки (хотя такие любители аскетизма как я могут предпочесть блокнот). Итак сегодня на рассмотрении у нас получается 6 пунктов- компиляторы и среды разработки для всех трёх популярных типов ОС - windows, linux, mac. Поэтому если я вдруг начал не с той ОС, которая установлена у Вас - просто продолжайте смотреть. Процессы установки программ будут специфичные для каждой ОС, но уверяю, это не сложнее, чем установить любую другую программу.
** Начнём с самого простого - с компилятора. 
   Их не так много - самые популярные это Clang и GCC. и их версии существуют для всех ОС для ПК (не беру в расчёт экзотические ОС для микроволновок и кнопочных телефонов, хотя, не удивлюсь)

*** Linux
	Большинство линукс-подобных ОС уже содержат в себе компилятор языка, или докачивает его с теми или иными приложениями в процессе существования. Вы можете легко проверить это, введя в теминале команду `gcc` или `clang` и получив сообщение о том, что команде не хватает параметров (это значит, что сама программа-компилятор уже установлена). В случае необходимости, компилятор языка С в линукс-подобных устанавливается командой простым обращением к Вашему менеджеру пакетов (например, в дебиан-подобных ОС это sudo apt install build-essential).

*** Windows
	Для окошек всё не так просто, хотя и здесь нет каких то совсем уж непреодолимых сложностей. В мире windows существует такой проект как MinGW. Название расшифровывается как Minimalist gnu for windows и название говорит само за себя. Скачать компилятор можно из репозитория sourceforge, прямая ссылка на скачивание будет ждать Вас в материалах урока:
https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download

Путь установки по-умолчанию находится где то внутри - C:\Program Files (x86)\ после установки нужно добавить в системную переменную PATH путь к директории где находится сам компилятор, а именно - внутри папки bin по тому пути, по которому вы установили minGW. по умолчанию это что то вроде
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/bin

Делается это следующим образом:
	а. нажать сочетание клавиш - Win+Pause (или нажать на ПКМ на иконке "мой компьютер" и выбрать пункт "свойства")
	б. выбрать "Дополнительные параметры системы"
	в. внизу выбрать "Переменные среды"
	г. в части системных переменных найти переменную Path и ниже нажать кнопку "Изменить"
	д. в открывшемся окне перейти в самый конец поля "Значение переменной". Добавить точку с запятой и ввести путь к компилятору. Нажать "ОК" во всех открытых окнах.
	е. проверить "видит" ли Windows компилятор. Открыть консоль "cmd.exe" (Пуск -> Служебные -> Командная строка). Ввести gcc -v.

*** MacOSX
	В ОС от яблочной компании тоже по умолчанию не установлен компилятор языка С, но это легко исправить буквально пятью кликами мышки. Установив при помощи AppStore инструментарий разработчика XCode вы получаете в своё распоряжение не только его, но и компилятор clang и gcc, в чём можно убедиться введя названия этих компиляторов в терминале. Если так вышло, что скачав XCode компиляторов не появилось - скачайте Command Line Tools for xcode - ссылка будет ждать Вас в материалах урока.

** среда разработки
   Есть мнение, что для разработки на языках С/С++ достаточно простого системного блокнота, и это мнение не просто популярно, а является причиной множества споров в интернете, по поводу того, что те, кто не программирует в блокноте - не настоящие программисты. Мы не будем подливать масла в огонь этой войны, поэтому рассмотрим несколько вариантов программирования, в том числе и блокнот. Итак инструменты разработки
*** Блокнот 
	Подойдёт любой блокнот, который умеет сохранять файлы в формате текста (то есть wordpad в windows, и textEdit в ОС от эпл - не подойдёт). хотя некоторые и не поддерживают подсветку синтаксиса, автоматические отступы и автодополнение кода - использовать их можно. Если хочется чуть больше комфорта при редактировании - можно скачать из интернета любой другой блокнот, благо сейчас их довольно много, на любой вкус, ссылки на официальные сайты некоторых из них будут ждать вас в материалах урока (sublime, np++, atom, vscode, emacs).
	Для того чтобы писать полноценные программы в блокноте нужно всего лишь держать под рукой открытую командную строку, в которой вы будете компилировать и запускать написанный код. общая идея в следующем - вы пишете код, сохраняете его в файл, далее переходите в терминал, запускаете компилятор и затем запускаете получившееся в результате компиляции приложение.
	- сохранить файл как "hello.c"
	- открыть консоль - cmd.exe
	- перейти в папку с сохранённым "hello.c" командой - cd C:\<ваша_папка_с_файлом>
	- скомпилировать командой - gcc hello.c -o hello
	- запустить hello.exe
	Вариант подходит для избавления от боязни терминала, опытным программистам, людям, желающим полного погружения в процесс, а также любителям полного контроля за сборкой и исполнением написанных программ.
	
*** CodeBlocks (codeblocks.org)
	Довольно простая кроссплатформенная среда разработки для языков С/С++. Весит чуть больше 60 мегабайт, меньше, чем некотороые блокноты из прошлого пункта, кстати. Есть версия для windows со включённым в сборку компилятором gcc, версии для популярных линукс-дистрибутивов и для макОСХ. Умеет подсвечивать синтаксис и делать автоотступы, может предлагать варианты автодополнения. На первый взгляд кажется весьма аскетичной, и, в принципе, таковой и является. Умеет разделять сборки проекта для запуска и дебага, автоматически находит установленные в системе компиляторы, соответствующие языкам С/С++ и предлагает некоторый набор шаблонов для создания программ, файлов и библиотек. 
	- запустить codeblocks-17.12mingw-setup.exe. Провести установку с настройками по-умолчанию.
	- После запуска в открывшемся окне выбрать "Create a new project" - Далее в списке выбрать "Console application" и нажать справа вверху "Go"
   - "Next" -> выбираем C -> "Next" -> выбираем имя проекта -> "Next" -> оставляем всё по-умолчанию -> "Finish".
   - в открывшемся дереве проекта слева открываем "Sources", далее два раза жмём на "main.c". Откроется готовый код проекта с "Hello world".
   - нажимаем "Build". Внизу должно быть сообщение о компиляции проекта.
   - нажимаем "Run". Откроется окно с результатом работы программы
   Вариант отлично подойдёт новичкам, многое сделает за разработчика, например, найдёт компилятор или предложит шаблон для программы. Значительная часть внешнего вида настраивается под желания программиста. Проект с открытыми исходниками, разрабатывается сообществом, поэтому работа ведётся довольно медленно, но постоянно.

*** Eclipse
	Весит около 250мб. Один из самых старых и хорошо проработанных проектов для написания кода с открытыми исходниками. Разрабатывается сообществом при поддержке EclipseFoundation. Для запуска требует установленную на компьютере виртуальную машину java (ссылки на всё необходимое всё ещё можно будет найти в материалах урока)	https://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html

	- установка Eclipse
		- скачать инсталятор. Перейти по-ссылке - https://www.eclipse.org/downloads/packages/
выбрать установку "Eclipse IDE for C/C++ Developers"
		- при старте будет предложено выбрать "workspace" - директорию в которой будут храниться ваши проекты. Пока можно оставить без изменений, нажать "Launch"
		- в открывшемся окне выбираем New C Project" -> "Next" -> вводим имя проекта, выбираем из списка готовых проектов "C Project", справа выбираем компилятор "MinGW GCC" -> "Finish". (Убедитесь, что не выбран Кросс-компилятор, он требует дополнительных настроек)
		- откроется окно с проектом, добавим в него исходники. Соберём, результат компиляции внизу в консоли
		Нажать "Run". Внизу в консоли будет выведен результат работы "Hello World".
	Вариант подойдёт разработчикам любого уровня, поскольку среда довольно проста, но вместе с тем очень хорошо расширяется разного рода плагинами, разработанными EclipseFoundation за долгие годы существования, кажется, на все случаи жизни.
*** QTCreator(вариант простой, но весьма объёмный) https://www.qt.io/download
	В Общей сложности весит порядка 13Гб, будьте внимательны, выбирая этот вариант.
	- скачать инсталлятор https://www.qt.io/download-thank-you?hsLang=en (19МБ)
	- запустить -> "Next" -> "Skip" -> "Далее" -> выбираем каталог установки -> список состоит из двух частей - "Preview" и "Qt". "Preview" это беты, альфы будущих продуктов(для тех кому не терпится). "Qt" то что нужно, выбираем последнюю версию, затем выбираем компилятор "MinGW 5.3.0 32 bit"(будет установлен инструментарий только для работы с C). -> "Далее" -> соглашаемся с лицензией -> Ярлыки меню Пуск "Далее" -> "Установить". В общей сложности Скачивание длится минут 10, при скорости 20Мбит, и ещё минут 5 установка. -> "Далее" -> Завершить.
	Запускаем "Qt Creator"
	Создаём проект без Qt, консольное приложение на языке С. Программа услужливо предлагает нам шаблон который мы можем собрать, нажав кнопку Build и запустить.
	Результат можно посмотреть в открывшемся окне.

	Qt это очень хороший вариант для тех, кто не собирается использовать свой компьютер больше никак, кроме программирования на С/С++. Это чрезвычайно удобный и многофункциональный инструмент, который помимо всего прочего имеет свой собственный набор инструментов для создания графических оболочек и даже 3д проектирования. 
*** Другие
	Говоря о средах разработки нельзя не упомянуть о тех, что не являются кроссплатформенными, у них есть ряд особенностей. Так, например, среда разработки xcode которая упоминалась выше, прячет полученный собранный проект куда то в недра иерархии скрытых системных папок, а Microsoft Visual Studio использует свой собственный компилятор MSVC который не поддерживает или не рекомендует к использованию некоторые функции из стандартной библиотеки С. Таким образом, для того чтобы эффективно разрабатывать на языке С по настоящему кроссплатформенные приложения, лучше всего использовать кроссплатформенные решения.

** Итоги
   В этом видео мы кратко поговорили о существующих инструментах для разработки ПО на языках С/С++ и написали в каждом из них первую работающую программу. До встречи на следующем занятии.
* Lesson_3
Здравствуйте коллеги. Рад всех приветствовать на очередном видеоуроке по основам языка С. На этом занятии мы рассмотрим такие ключевые конструкции языка как "условные операторы", а также что понимается под "блоками кода" и "областями видимости".	 
Пожалуй, самый часто используемый в любом языке программирования, в том числе и в языке С оператор - это оператор if() и его вариации. Оператор if позволяет программе принять решение о выполнении или невыполнении того или иного действия в зависимости от текущего состояния. Например, зададим пользователю вопрос, хочет ли он, чтобы его поприветствовали, для этого опишем переменную char answer, которая будет хранить ответ пользователя в виде символа и спросим у пользователя в консоли хочет ли он чтобы мы его поприветствовали, для этого используем функцию printf, которой в качестве параметра передадим строку с приглашением. Далее при помощи функции scanf считаем ответ пользователя в переменную answer и в зависимости от пользовательского ввода программа либо поприветствует пользователя, либо нет, это решение будет принято с помощью оператора if. В случае, если условие в скобках выполнится, выполнится и последующий код в фигурных скобках. Если условие не выполнится, то все операторы внутри этих фигурных скобок будут проигнорированы.	
if()



char answer;
printf("do you want me to salute you (y/n)?");

scanf ("%s", &answer);
if (answer == ‘y’) {
    printf("Hello, user");
}
Зачастую складываются ситуации, когда нужно выполнить разные наборы действий в зависимости от результата проверки условия. Для таких случаев используется дополнение к оператору if - оператор else в котором описывается последовательность действий выполняемая в случае если условие в скобках дало ложный результат. Как вы видите, в зависимости от того что ввел пользователь мы реализуем ту или иную ветку оператора if-else. Конструкция if-else является единым оператором выбора.
	else{
printf("I didn't want to salute you anyway");
}
Множественный выбор при помощи оператора if можно осуществить используя конструкцию if-else if-else. Данное усложнение также будет являться единым оператором выбора. Добавим в нашу конструкцию еще одно условие if и опишем пользовательский ввод для ответа “да” и ответа “нет”. В этом примере оператором else будет непонимание программы того что ввел пользователь. Выведем в консоль надпись «Я не могу понять ваш ввод».
Операторов else if в одной управляющей конструкции может быть сколько угодно, в отличие от оператора if и оператора else которых не может быть больше одного.	if(answer == "y") {
    printf("Hello, user");
} else if (answer == "n"){
    printf("I didn't want to salute you anyway");
} else {
    printf("I can't understand your input");
}
Для короткой или внутристрочной записи условного оператора, а также для присваивания переменных по условию можно использовать тернарный оператор, также называемый оператором условного перехода. Например, создадим две целочисленные переменные а, b, c и зададим им какие-нибудь начальные значения, допустим а = 10 и b = 15 и запись вида c = (a > b) ? b : a  будет обозначать, что в случае если a > b в переменную c запишется значение b, и наоборот если b > a, то в переменную c запишется значение а. Давайте распишем это в привычном виде if-else/	int a;
int b;
int c;
c = (a > b) ? b : a

if (a > b){
    c = b;
} else {
    c = a;
} 
Также тернарный оператор можно использовать для удобного форматированного вывода, например опишем функцию printf , которая будет печатать нам строку и в зависимости от условия это будет "true" либо "false". Давайте проверим как это работает, в результате видим true, потому что единица действительно больше ноля.	
printf("\n%s", (1>0) ? "true" : "false");
Операции сравнения бывают трёх типов - арифметические, логические и тернарный оператор. Арифметическое сравнение - это привычные нам со школы операторы больше, меньше, больше или равно, меньше или равно и проверка на равенство, которая записывается в виде двух знаков равенства. Возвращают истину, когда выполняются соответствующие названиям условия.
Логических операторов четыре - это И, ИЛИ, НЕ и ИСКЛЮЧАЮЩЕЕ ИЛИ. В отличие от арифметических двоичных операторов - логические возвращают истину и ложь т.е. 1 либо 0.
Оператор И возвращает истину когда оба операнда истинны
Оператор ИЛИ возвращает истину когда хотя бы один из операндов истинный
Оператор НЕ возвращает истину когда операнд ложный
Оператор ИСКЛЮЧАЮЩЕГО ИЛИ возвращает истину когда операнды различаются
Обращаю ваше внимание, что если в операторе if будет выполнятся только одно действие, фигурных скобок может и не быть. Используя логические операторы в программе мы можем написать логику практически любой сложности. В языке Си также  нет ограничений на использование сложных условий. Сложные условия это такие условия, где в круглых скобках выполняется более одного сравнения. Сравнения производятся в порядке заранее оговоренного приоритета.	
СЛАЙД С ОПЕРАЦИЯМИ АРИФМЕТИЧЕСКОГО И ЛОГИЧЕСКОГО СРАВНЕНИЯ

//  > < == <= >= !=



// && || ! ^

СЛАЙД С ПРИОРИТЕТАМИ ОПЕРАЦИЙ СРАВНЕНИЯ
if (1 && 0) printf("false");
if (1 || 0) printf("true");
if (!(1)) printf("false");
if (1 ^ 1) printf("false");
Внутри операторных скобок конструкции if могут находиться другие условные операторы. Условия, расположенные таким образом называются вложенными. Никаких ограничений на использование вложенных условий в языке С нет. Закомментируем этот кусок кода, чтобы он не мешал.
	/* if (1) {
	if (1){
		//...
	}
}
*/
Например, дана некоторая переменная int x = 7 нужно выяснить, не выходит ли эта переменная за рамки заданных значений. Запишем условие: если x >= 0 и x <= 10 выдать сообщение о том, что х подходит. Добавим новую строку, чтобы отделить этот пример и рассмотрим данную запись подробнее.
В данной записи мы видим, что сначала х сравнивается с нулём, затем с десятью, и в конце результаты будут сравнены между собой. 
Самый неприоритетный оператор тернарный. Если Вы сомневаетесь в приоритете сравнений или Вам необходимо описать какое-то очень сложное условие, всегда можно воспользоваться скобками, задав приоритет операций явно. В таком случае в первую очередь будут выполнены операции в скобках.
Для того, чтобы пользоваться арифметическими бинарными операторами в качестве логических, обязательно нужно удостовериться, что вы сравниваете нули и единицы, а не какие-то другие числа.	printf("\n");
int x = 7;
if ((x >= 0) && (x <= 10)) {
	printf("X Fits!");
}

Говоря об операторах языка С и управляющих конструкциях нельзя не сказать о "блоках кода" и "областях видимости". Как видно, условные операторы содержат записи в фигурных скобках. В такие же скобки заключён код функции main. Эти скобки называются "операторными", а то что в них содержится, называется "блоком кода". Все переменные, которые инициализируются внутри блока кода, существуют и видны только внутри кодового блока. Поэтому пространство между операторными скобками также называют "областью видимости". Итак вы видите что мы не можем напечатать значение переменной var, поскольку она была создана внутри блока кода оператора  if и перестала существовать для нашей программы как только мы вышли за его пределы. Удалим  инициализацию и вывод в консоль переменной var, запустим нашу программу и удостоверимся что все работает.	printf("\n");
int x = 7;
if ((x >= 0) && (x <= 10)) {
	int var = 0;
	printf("X Fits!");
}

printf("\n%d", var);



